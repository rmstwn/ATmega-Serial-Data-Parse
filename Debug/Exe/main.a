;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Data Parsing
;Version : 1
;Date    : 26/09/2019
;Author  : Rama
;Company : Electronic Engineering Polytechnic Institute of Surabaya
;Comments:
;ATmega162 Serial Communication
;12MHz Clock
;Data Parse
;
;
;Chip type               : ATmega162
;Program type            : Application
;AVR Core Clock frequency: 12,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega162.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000004 VOL: 0
	#endif
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;
;// Declare your global variables here
;unsigned char START_BYTE = 0x53;
;unsigned char counterValue = 0;
;unsigned char counterValuesum = 0;
;unsigned char staticValue = 5;
;unsigned char checksum = 0;
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;
;void sendByte(unsigned char data){
; 0000 0029 void sendByte(unsigned char data){

	.CSEG
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
; 0000 002A    while(!(UCSR0A & (1<<UDRE)))
;PCODE: $00000009 VOL: 0
;	data -> Y+0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 002B    {
; 0000 002C      //Do nothing
; 0000 002D    }
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 002E 
; 0000 002F    UDR = data;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0030 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;void main(void)
; 0000 0033 {
;PCODE: $00000015 VOL: 0
; 0000 0034 // Declare your local variables here
; 0000 0035 
; 0000 0036 // Crystal Oscillator division factor: 1
; 0000 0037 #pragma optsize-
; 0000 0038 CLKPR=(1<<CLKPCE);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0039 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 003A #ifdef _OPTIMIZE_SIZE_
; 0000 003B #pragma optsize+
; 0000 003C #endif
; 0000 003D 
; 0000 003E // Input/Output Ports initialization
; 0000 003F // Port A initialization
; 0000 0040 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0041 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0042 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0043 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0044 
; 0000 0045 // Port B initialization
; 0000 0046 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0047 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0048 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0049 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004A 
; 0000 004B // Port C initialization
; 0000 004C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 004E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0050 
; 0000 0051 // Port D initialization
; 0000 0052 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0053 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0054 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0055 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0056 
; 0000 0057 // Port E initialization
; 0000 0058 // Function: Bit2=In Bit1=In Bit0=In
; 0000 0059 DDRE=(0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 005A // State: Bit2=T Bit1=T Bit0=T
; 0000 005B PORTE=(0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 005C 
; 0000 005D // USART0 initialization
; 0000 005E // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 005F // USART0 Receiver: Off
; 0000 0060 // USART0 Transmitter: On
; 0000 0061 // USART0 Mode: Asynchronous
; 0000 0062 // USART0 Baud Rate: 9600
; 0000 0063 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0064 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0065 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0066 UBRR0H=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0067 UBRR0L=0x4D;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0068 
; 0000 0069 while (1)
;PCODE: $00000038 VOL: 0
; 0000 006A       {
; 0000 006B       // Place your code here
; 0000 006C       sendByte(START_BYTE);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 006D 
; 0000 006E       for(counterValue=0;counterValue<=10;counterValue++){
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 006F       sendByte(counterValue);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0070       counterValuesum += counterValue;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0071       }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0072 
; 0000 0073       sendByte(staticValue);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0074 
; 0000 0075       checksum = counterValuesum + staticValue;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0076       sendByte(checksum);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0077 
; 0000 0078       delay_ms(250);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0079       //while(1);
; 0000 007A 
; 0000 007B       }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007C }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
